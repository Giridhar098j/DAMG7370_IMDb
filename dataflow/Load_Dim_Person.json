{
	"name": "Load_Dim_Person",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SnowflakeTable_Name_Basics",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTable_Dim_Person",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SnowflakeTable_Dim_Person",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "DimPersonWithSk"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "AddingAuditColumns"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Job_Id as string (\"14\")",
				"}",
				"source(output(",
				"          NCONST as string,",
				"          PRIMARYNAME as string,",
				"          BIRTHYEAR as decimal(38,0),",
				"          DEATHYEAR as decimal(38,0),",
				"          PRIMARYPROFESSION as string,",
				"          KNOWNFORTITLES as string,",
				"          JOB_ID as string,",
				"          LOAD_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> source1",
				"source(output(",
				"          MAXPERSONSK as decimal(38,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'select NVL(MAX(Person_ID_SK),0) as MaxPersonSK FROM IMDB_SCHEMA.DIM_Person',",
				"     format: 'query') ~> source2",
				"source1, source2 join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> DimPersonWithSk",
				"DimPersonWithSk keyGenerate(output(ROWNUM as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 derive(Person_ID_SK = MAXPERSONSK + ROWNUM,",
				"          JOB_ID = $Job_Id,",
				"          LOAD_DT = currentDate()) ~> AddingAuditColumns",
				"AddingAuditColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PERSON_ID_SK as decimal(38,0),",
				"          NCONST as string,",
				"          PRIMARY_NAME as string,",
				"          BIRTH_YEAR as decimal(38,0),",
				"          DEATH_YEAR as decimal(38,0),",
				"          JOB_ID as string,",
				"          LOAD_DT as date",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     stageInsert: true,",
				"     mapColumn(",
				"          PERSON_ID_SK = Person_ID_SK,",
				"          NCONST,",
				"          PRIMARY_NAME = PRIMARYNAME,",
				"          BIRTH_YEAR = BIRTHYEAR,",
				"          DEATH_YEAR = DEATHYEAR,",
				"          JOB_ID,",
				"          LOAD_DT",
				"     )) ~> sink1"
			]
		}
	}
}